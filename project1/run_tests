#!/bin/bash

# This script is used to run junit tests on student code.

usage=$'Usage: bash run_tests (all|[Exercise[1-9]|Problem[1-9]]*)?
  where [1-9] is an appropriate exercise or problem number.
Examples:
  bash run_tests                                 # to run all tests
  bash run_tests Exercise1 Exercise4 Problem1    # to run specific tests
  bash run_tests all                             # also runs all tests'

# Set up a few variables specific to this project
projectName="p1"
testName="P1Test"
exerciseCount=6
problemCount=2

# Package name for the entire semester
packageName="edu.umb.cs210"

# variable that stores the previous 3 variables as a fully qualified class name
testClass="${packageName}.${projectName}.${testName}"

# variable to be used as regex to ensure proper argument input
nameRE="(Exercise[1-${exerciseCount}]|Problem[1-${problemCount}])"

# Set up the java classpath to include output files and the appropriate jars
#basePath="$PROJECT_HOME/project${projectName:1:1}"
basePath=.
export CLASSPATH="$HOME/lib/algs4.jar"
export CLASSPATH="$basePath/out:$CLASSPATH"
export CLASSPATH="$basePath/src/test/resources/algs4.jar:$CLASSPATH"
export CLASSPATH="$basePath/src/test/resources/testingtools.jar:$CLASSPATH"
export CLASSPATH="$basePath/src/test/resources/json-simple-3.1.0.jar:$CLASSPATH"
export CLASSPATH="$basePath/src/test/resources/apiguardian-api-1.1.0.jar:$CLASSPATH"
export CLASSPATH="$basePath/src/test/resources/junit-platform-console-standalone-1.6.0.jar:$CLASSPATH"

# Make sure the test file is compiled
javac -d out $basePath/src/test/edu/umb/cs210/p${projectName:1:1}/*.java
javac -d out $basePath/src/main/edu/umb/cs210/p${projectName:1:1}/*.java

################################################################################
# Hey! Student! Yeah, you.
#
# If you've read this far, then let me reward your curiosity with a tip that'll
# make your life a bit easier when working on these projects.
#
# See that javac command just above this comment block? Add lines with the same
# command, but pointing to your source files instead of the test files. That
# will allow you to compile and test your code with one command.
#
# That "${projectName:1:1}" part starts at index 1 and grabs 1 character from
# the projectName variable. That means it grabs the project number.
# For projectName="p1", it evaluates to "1".
#
# Make sure to get the directory right (change "test" to "main", and add a
# single line per source file. Also, put them in order. Don't try to compile
# Harmonic before compiling Rational.
#
# If you use the wildcard (like *.java) and compilation fails on any of your
# files, all subsequent files will not be compiled. Don't use wildcards here.
################################################################################

# If there's no args, or arg1 is "all", run all tests
output=""
if [[ $# -eq 0 || $1 =~ all ]]; then
  echo "Running all tests. This may take several seconds."
  currOutput="$(java org.junit.platform.console.ConsoleLauncher --exclude-engine=junit-vintage --disable-banner --select-class=${testClass})"
  # Strip some unnecessary output (a summary with too much irrelevant info
  currOutput="${currOutput%ms
[*}ms"    # Yes, there's a line break there. That's intentional
  output="$output$currOutput"
else
  invalidArgs=""
  # else, for each argument (i) in the list of arguments ($@)
  for i in "$@"
  do
    # If the argument is valid (validated using regex)
    if [[ $i =~ $nameRE ]]; then
      # set the current class (exercise/problem).
      # This will look like "edu.umb.cs210.p1.P1Test$Exercise1"
      # The $ indicates Exercise1 is an inner class of the P1Test class.
      currClass="${testClass}\$$i"
      # Then run the test on the current class (exercise/problem)
      currOutput="$(java org.junit.platform.console.ConsoleLauncher --exclude-engine=junit-vintage --disable-banner --select-class=${currClass})"
      # Strip some unnecessary output (a summary with too much irrelevant info
      currOutput="${currOutput%ms
[*}ms"    # Yes, there's a line break there. That's intentional
      output="$output$currOutput"
    else
      # If it's not a valid argument, record arg for reporting at end
      invalidArgs="Invalid specific argument: $i"$'\n'"$invalidArgs"
    fi
  done
fi
echo "${output}"

# If any args were invalid, list them, then print usage
if [[ ! -z "$invalidArgs" ]] ; then
  echo "$invalidArgs"
  echo "${usage}"
fi
